@model DunkSearch.Domain.Models.ViewModels.HomeViewModel
@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4 page-title">DunkSearch</h1>
    <p>Search video captions from Dunkey and friends</p>
    @using (Html.BeginForm(null, null, FormMethod.Post, new { id = "SearchForm" }))
    {
        @Html.HiddenFor(p => p.PageSize)
        @Html.HiddenFor(p => p.PageNumber)
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="input-group form-group">
                        @Html.TextBoxFor(p => p.SearchTerm, new { @placeholder = "Enter a search term...", @class = "form-control" })
                        <div class="input-group-append">
                            <button id="search-btn" class="btn btn-primary" type="submit">Search</button>
                        </div>
                        <div class="input-group-append">
                            <a id="advanced-filters-btn" class="btn btn-outline-secondary" data-toggle="collapse" href="#advancedFilters" role="button" aria-expanded="true" aria-controls="advancedFilters">
                                <svg class="icon icon-cog">
                                    <use xlink:href="#icon-cog"></use>
                                </svg>
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            <div class="collapse advanced-filters-container show" id="advancedFilters">
                <div class="card card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="control-label">
                                @Html.LabelFor(p => p.ChannelOptions, new { @class = "control-label label-required" })
                            </div>
                            <div>
                                @for (int i = 0; i < Model.ChannelOptions.Count; i++)
                                {
                                    <label for="ChannelOptions[@i].Selected" class="channel-label">@Model.ChannelOptions[i].ChannelName</label>
                                    @Html.CheckBoxFor(p => p.ChannelOptions[i].Selected, new { @class = "channel-choice", id = "ChannelOptions[" + i + "].Selected" })
                                    @Html.HiddenFor(p => p.ChannelOptions[i].ChannelId)
                                }
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="control-label">
                                @Html.LabelFor(p => p.SearchMode, new { @class = "control-label label-required" })
                            </div>
                            <div>
                                <label>Simple </label>
                                @Html.RadioButtonFor(p => p.SearchMode, "Simple")
                                <label style="margin-left:10px">Fuzzy </label>
                                @Html.RadioButtonFor(p => p.SearchMode, "Fuzzy")
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(p => p.VideoId, new { @class = "control-label" })
                                <select id="VideoId" name="VideoId" class="form-control" style="width:100%;">
                                    @if (Model.VideoId != null)
                                    {
                                        <option value="@Model.VideoId" selected="selected">@Model.DefaultVideoName</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(p => p.CaptionTypeId, new { @class = "control-label" })
                                <select id="CaptionTypeId" name="CaptionTypeId" class="form-control" style="width:100%;" asp-for="@Model.CaptionTypeId">
                                    <option value=""></option>
                                    @foreach (var captionTypeOption in Model.CaptionTypeOptions)
                                    {
                                        <option value="@captionTypeOption.id">@captionTypeOption.text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(p => p.UploadDateFrom, new { @class = "control-label" })
                                @Html.TextBoxFor(p => p.UploadDateFrom, new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                @Html.LabelFor(p => p.UploadDateTo, new { @class = "control-label" })
                                @Html.TextBoxFor(p => p.UploadDateTo, new { @class = "form-control" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    } <!-- End of form -->

    <div id="SearchResultsPartial"></div>

    <!-- Modal -->
    <div class="modal fade" id="youtubeVideoModal" tabindex="-1" role="dialog" aria-labelledby="youtubeVideoModalTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-lg" role="document" style="max-width:fit-content">
            <div class="modal-content">
                <div class="modal-body" id="youtube-modal-body">
                    <div id="youtube-player"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- SVG for the cog, from icomoon.io -->
<svg aria-hidden="true" style="position: absolute; width: 0; height: 0; overflow: hidden;" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>
        <symbol id="icon-cog" viewBox="0 0 32 32">
            <path d="M29.181 19.070c-1.679-2.908-0.669-6.634 2.255-8.328l-3.145-5.447c-0.898 0.527-1.943 0.829-3.058 0.829-3.361 0-6.085-2.742-6.085-6.125h-6.289c0.008 1.044-0.252 2.103-0.811 3.070-1.679 2.908-5.411 3.897-8.339 2.211l-3.144 5.447c0.905 0.515 1.689 1.268 2.246 2.234 1.676 2.903 0.672 6.623-2.241 8.319l3.145 5.447c0.895-0.522 1.935-0.82 3.044-0.82 3.35 0 6.067 2.725 6.084 6.092h6.289c-0.003-1.034 0.259-2.080 0.811-3.038 1.676-2.903 5.399-3.894 8.325-2.219l3.145-5.447c-0.899-0.515-1.678-1.266-2.232-2.226zM16 22.479c-3.578 0-6.479-2.901-6.479-6.479s2.901-6.479 6.479-6.479c3.578 0 6.479 2.901 6.479 6.479s-2.901 6.479-6.479 6.479z"></path>
        </symbol>
    </defs>
</svg>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/css/bootstrap-datepicker.min.css" />
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.9.0/js/bootstrap-datepicker.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
<script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
<link href="https://code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css" rel="stylesheet" />
<script type="text/javascript">

    // Keep track if search was clicked.
    // Used to prevent loading on small devices if scrolling to bottom is possible before searching.
    var searchStarted = false;
    // Keep track if search is currently being performed so we don't load many pages at once when scrolling
    var searchInProgress = false;

    $(document).ready(function ()
    {
        //
        // Set up the datepickers
        //
        initializeDatepicker("UploadDateFrom", "UploadDateTo", "setStartDate");
        initializeDatepicker("UploadDateTo", "UploadDateFrom", "setEndDate");

        //
        // Set up the select2 dropdowns
        //
        //$("#ChannelId").select2({
        //    width: 'resolve',
        //    minimumResultsForSearch: -1,
        //    allowClear: true,
        //    placeholder: "Select a channel"
        //});

        $(".channel-choice").checkboxradio({
            icon: false
        });

        $("#CaptionTypeId").select2({
            width: 'resolve',
            minimumResultsForSearch: -1,
            allowClear: true,
            placeholder: "Select a caption language"
        });

        $("#VideoId").select2({
            ajax: {
                url: '/Video/GetSelectItems',
                data: function (params)
                {
                    var query = {
                        searchTerm: params.term
                    }

                    // Query parameters will be ?searchTerm=[term]
                    return query;
                }
            },
            width: 'resolve',
            minimumInputLength: 3,
            allowClear: true,
            placeholder: "Select a video"
        });

        //
        // Set up the form submit listener to load the search results.
        // Used for starting new searches
        //
        $('#SearchForm').on('submit', function (e)
        {
            // prevents form from submitting standard way, causing page refresh
            e.preventDefault();
            //console.log("in onSubmit");
            searchStarted = true;

            // do nothing if nothing or whitespace was entered in the search bar
            var searchTerm = $("#SearchTerm").val();
            if (!searchTerm || !searchTerm.trim())
            {
                return;
            }

            // If the advanced filters section is showing, hide it
            if ($("#advancedFilters").hasClass("show"))
            {
                $("#advanced-filters-btn").click();
            }

            // Reset page number to 1 if user is starting a new search after paging
            $("#PageNumber").val(1);

            $.post('/Home/Search', $(this).serialize(), function (results)
            {
                // replace existing search results if there were any
                $('#SearchResultsPartial').html(results);
            });

            // Update the URL parameters so user can copy/paste this search request
            updateUrlParams();
        });

        //
        // Register infinite loading logic
        //
        $(window).scroll(function ()
        {
            if (!searchStarted || searchInProgress)
            {
                return;
            }

            var docHeight = $(document).height(); // the height of the entire web page regardless of what's currently visible
            var windowHeight = $(this).height(); // the height of the page that's currently visible in the browser window
            var scrollTopHeight = $(this).scrollTop(); // how many pixels down has the vertical scroll bar moved
            var scrollTopHeightTwo = document.body.scrollTop;
            // if the difference between docHeight and windowHeight equals scrollTopHeight, it means
            // you have scroleld to the very bottom of the page.
            // Add a few pixels of leeway so it loads without having to scroll to the exact bottom
            //console.log("Document height: " + docHeight + " | this height: " + windowHeight + " | scrollTop: " + scrollTopHeight + " test: " + scrollTopHeightTwo);

            if ((docHeight - windowHeight) <= (scrollTopHeight + 200)) // leave 200px of leeway, because on mobile browsers it never truly reaches the bottom
            {
                //console.log('Scrolled to Bottom' + Math.random());

                // Increment page for search
                var curPageNum = parseInt($("#PageNumber").val());
                if (curPageNum == -1)
                {
                    return; // don't try to load more results if we set this flag
                }
                $("#PageNumber").val(curPageNum + 1);
                searchInProgress = true;
                $.post('/Home/Search', $("#SearchForm").serialize(), function (results)
                {
                    // add new results instead of overwriting
                    $('#SearchResultsPartial').append(results);
                    searchInProgress = false;
                });
            }
        });

        //
        //
        //
        $('#youtubeVideoModal').on('hidden.bs.modal', function (e)
        {
            // when user closes modal, unload the modal contents to stop the video
            // and prepare it for the next video
            $("#youtube-modal-body").html("<div id='youtube-player'></div>");
        })

        //
        // Register the YouTube IFrame player asynchronously
        //
        var tag = document.createElement('script');
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName('script')[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

        // Final step - if any URL parameters were passed in,
        // then automatically start the search on page load.
        var searchParams = window.location.search;
        if (searchParams != null && searchParams != "" && searchParams != "?")
        {
            $('#SearchForm').submit();
        }
    });

    /**
     * Initializes the bootstrap datepicker and makes it so
     * the dependent datepicker date range is limited by the input datepicker
     */
    function initializeDatepicker(inputPickerId, dependentPickerId, methodName)
    {
        $("#" + inputPickerId).datepicker({
            clearBtn: true
        });
        $("#" + inputPickerId).on("changeDate", function (selected)
        {
            var cutoffDate = (selected.date == null) ? null : new Date(selected.date.valueOf())
            $("#" + dependentPickerId).datepicker(methodName, cutoffDate);
        });
    }

    function showYouTubePlayer(videoId, startSeconds)
    {
        //console.log('starting showYouTubePlayer');
        $("#youtube-player").html(null);
        var defaultPlayerWidth = 640;
        // if not enough room for default width, use dynamic width based on screen size.
        var playerWidth = Math.min(window.innerWidth - 50, defaultPlayerWidth);
        var playerHeight = (playerWidth * 9) / 16; // ensures player is in 16:9 format
        var player = new YT.Player('youtube-player', {
            width: playerWidth,
            height: playerHeight,
            videoId: videoId,
            playerVars: {
                playsinline: 1,
                start: startSeconds,
                enablejsapi: 1,
                autoplay: 1,
            },
            events: {
                //< !-- 'onReady': onPlayerReady, -- >
                //< !-- 'onStateChange': onPlayerStateChange-- >
            }
        });

        $('#youtubeVideoModal').modal('show')
    }

    //
    // Updates all the URL search parameters
    //
    function updateUrlParams()
    {
        var url = new URL(window.location);
        updateUrlParam(url, "SearchTerm", $("#SearchTerm").val());
        updateUrlParam(url, "VideoId", $("#VideoId").val());
        updateUrlParam(url, "CaptionTypeId", $("#CaptionTypeId").val());
        updateUrlParam(url, "UploadDateFrom", $("#UploadDateFrom").val());
        updateUrlParam(url, "UploadDateTo", $("#UploadDateTo").val());
        updateUrlParam(url, "SearchMode", $("input[name='SearchMode']:checked").val());
        var channelIds = [];
        var channelCheckboxes = $(".channel-choice");
        for (var i = 0; i < channelCheckboxes.length; i++)
        {
            if (channelCheckboxes[i].checked)
            {
                channelIds.push($("#ChannelOptions_" + i + "__ChannelId").val());
            }
        }
        updateUrlParam(url, "ChannelIds", channelIds);

        window.history.pushState({}, null, url);
    }

    //
    // Updates a single URL search parameter
    //
    function updateUrlParam(url, paramName, value)
    {
        if (value == "" || value == null)
        {
            url.searchParams.delete(paramName);
        }
        else
        {
            if (paramName != "ChannelIds")
            {
                url.searchParams.set(paramName, value);
            }
            else
            {
                // ChannelIds need to be a list in order to bind to model, so we have to append multiple
                url.searchParams.delete(paramName);
                for (var i = 0; i < value.length; i++)
                {
                    url.searchParams.append("ChannelIds", value[i]);
                }
            }
        }
    }

</script>